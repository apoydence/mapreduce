// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package mapreduce_test

import "github.com/apoydence/mapreduce"

type mockReducer struct {
	ReduceCalled chan bool
	ReduceInput  struct {
		Value chan [][]byte
	}
	ReduceOutput struct {
		Reduced chan [][]byte
	}
}

func newMockReducer() *mockReducer {
	m := &mockReducer{}
	m.ReduceCalled = make(chan bool, 100)
	m.ReduceInput.Value = make(chan [][]byte, 100)
	m.ReduceOutput.Reduced = make(chan [][]byte, 100)
	return m
}
func (m *mockReducer) Reduce(value [][]byte) (reduced [][]byte) {
	m.ReduceCalled <- true
	m.ReduceInput.Value <- value
	return <-m.ReduceOutput.Reduced
}

type mockFileReader struct {
	LengthCalled chan bool
	LengthOutput struct {
		Ret0 chan uint64
	}
	ReadCalled chan bool
	ReadOutput struct {
		Ret0 chan []byte
		Ret1 chan error
	}
}

func newMockFileReader() *mockFileReader {
	m := &mockFileReader{}
	m.LengthCalled = make(chan bool, 100)
	m.LengthOutput.Ret0 = make(chan uint64, 100)
	m.ReadCalled = make(chan bool, 100)
	m.ReadOutput.Ret0 = make(chan []byte, 100)
	m.ReadOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockFileReader) Length() uint64 {
	m.LengthCalled <- true
	return <-m.LengthOutput.Ret0
}
func (m *mockFileReader) Read() ([]byte, error) {
	m.ReadCalled <- true
	return <-m.ReadOutput.Ret0, <-m.ReadOutput.Ret1
}

type mockFileWriter struct {
	WriteCalled chan bool
	WriteInput  struct {
		Data chan []byte
	}
	WriteOutput struct {
		Ret0 chan error
	}
}

func newMockFileWriter() *mockFileWriter {
	m := &mockFileWriter{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Data = make(chan []byte, 100)
	m.WriteOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockFileWriter) Write(data []byte) error {
	m.WriteCalled <- true
	m.WriteInput.Data <- data
	return <-m.WriteOutput.Ret0
}

type mockFileSystem struct {
	CreateFileCalled chan bool
	CreateFileInput  struct {
		Name chan string
	}
	CreateFileOutput struct {
		Ret0 chan error
	}
	ReadFileCalled chan bool
	ReadFileInput  struct {
		Name chan string
	}
	ReadFileOutput struct {
		Ret0 chan mapreduce.FileReader
		Ret1 chan error
	}
	WriteToFileCalled chan bool
	WriteToFileInput  struct {
		Name chan string
	}
	WriteToFileOutput struct {
		Ret0 chan mapreduce.FileWriter
		Ret1 chan error
	}
}

func newMockFileSystem() *mockFileSystem {
	m := &mockFileSystem{}
	m.CreateFileCalled = make(chan bool, 100)
	m.CreateFileInput.Name = make(chan string, 100)
	m.CreateFileOutput.Ret0 = make(chan error, 100)
	m.ReadFileCalled = make(chan bool, 100)
	m.ReadFileInput.Name = make(chan string, 100)
	m.ReadFileOutput.Ret0 = make(chan mapreduce.FileReader, 100)
	m.ReadFileOutput.Ret1 = make(chan error, 100)
	m.WriteToFileCalled = make(chan bool, 100)
	m.WriteToFileInput.Name = make(chan string, 100)
	m.WriteToFileOutput.Ret0 = make(chan mapreduce.FileWriter, 100)
	m.WriteToFileOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockFileSystem) CreateFile(name string) error {
	m.CreateFileCalled <- true
	m.CreateFileInput.Name <- name
	return <-m.CreateFileOutput.Ret0
}
func (m *mockFileSystem) ReadFile(name string) (mapreduce.FileReader, error) {
	m.ReadFileCalled <- true
	m.ReadFileInput.Name <- name
	return <-m.ReadFileOutput.Ret0, <-m.ReadFileOutput.Ret1
}
func (m *mockFileSystem) WriteToFile(name string) (mapreduce.FileWriter, error) {
	m.WriteToFileCalled <- true
	m.WriteToFileInput.Name <- name
	return <-m.WriteToFileOutput.Ret0, <-m.WriteToFileOutput.Ret1
}

type mockNetwork struct {
}

func newMockNetwork() *mockNetwork {
	m := &mockNetwork{}
	return m
}

type mockMapper struct {
	MapCalled chan bool
	MapInput  struct {
		Value chan []byte
	}
	MapOutput struct {
		Key chan []byte
		Ok  chan bool
	}
}

func newMockMapper() *mockMapper {
	m := &mockMapper{}
	m.MapCalled = make(chan bool, 100)
	m.MapInput.Value = make(chan []byte, 100)
	m.MapOutput.Key = make(chan []byte, 100)
	m.MapOutput.Ok = make(chan bool, 100)
	return m
}
func (m *mockMapper) Map(value []byte) (key []byte, ok bool) {
	m.MapCalled <- true
	m.MapInput.Value <- value
	return <-m.MapOutput.Key, <-m.MapOutput.Ok
}
